import pandas as pd

# company_lst = [['미라콤아이앤씨'], ['LG CNS'], ['한국알테어'], ['케이에스넷'], ['뷰런테크놀로지'], ['KIS정보통신'], ['현대오토에버'], ['LG CNS'], ['네이버'], ['LG CNS'], ['삼성SDS'], ['KT'], ['플라이웨이게임'],
#                 ['드림라인'], ['아이티언'], ['KT'], ['페이히어'], ['KT디에스'], ['알디에스']]

# spec_lst = [['지원분야 : 공통(CE/IM/전사직속)-소프트웨어', '지원분야', '|', '학교 : 서울(下)', '학교', '|', '학점 : 3.70', '학점', '|', '토익점수 : 870', '토익점수', '|', '오픽점수 : IH', '오픽점수', '|', '자격증 : 정보처리기사', '자격증', '|', '공모전 : 게임/소프트웨어', '공모전'], ['지원분야 : 시스템엔지니어', '지원분야', '|', '학교 : 서울(下)', '학교', '|', '학점 : 3.92', '학점', '|', '오픽점수 : IM', '오픽점수', '|', '인턴 : IT.프로그램.개발.웹.통신장비', '인턴', '|', '공모전 : 게임/소프트웨어', '공모전'],
#        ['지원분야 : 제품시험', '지원분야', '|', '학교 : 해외대학', '학교', '|', '학점 : 4.09', '학점', '|', '오픽점수 : IM', '오픽점수', '|', '인턴 : 건설.기계.환경.안전.재료', '인턴'], ['지원분야 : 시스템프로그래머', '지원분야', '|', '학교 : 지방(下)', '학교', '|', '학점 : 3.63', '학점', '|', '인턴 : 전기.전자', '인턴', '|', '공모전 : 기타', '공모전'], ['지원분야 : 시스템프로그래머', '지원분야', '|', '학교 : 지방(下)', '학교', '|', '학점 : 3.63', '학점', '|', '인턴 : 전기.전자', '인턴', '|', '공모전 : 기타', '공모전'],
#        ['지원분야 : 시스템엔지니어', '지원분야', '|', '학교 : 지방(下)', '학교', '|', '학점 : 3.63', '학점', '|', '인턴 : 전기.전자', '인턴', '|', '공모전 : 기타', '공모전'], ['지원분야 : 자동차설계', '지원분야', '|', '학교 : 서울(下)', '학교', '|', '학점 : 4.00', '학점', '|', '오픽점수 : AL', '오픽점수', '|', '인턴 : 건설.기계.환경.안전.재료', '인턴'],
#        ['지원분야 : 정보통신.IT', '지원분야', '|', '학교 : 해외대학', '학교', '|', '학점 : 3.39', '학점', '|', '토익점수 : 735', '토익점수', '|', '오픽점수 : IM', '오픽점수', '|', '자격증 : 정보처리기사, 컴퓨터활용능력 1급, 사무자동화산업기사, 리눅스마스터2급, CCNA', '자격증'],
#        ['지원분야 : 공통(CE/IM/전사직속)-소프트웨어', '지원분야', '|', '학교 : 서울(下)', '학교', '|', '학점 : 4.13', '학점', '|', '오픽점수 : IM', '오픽점수', '|', '자격증 : 정보처리기사, 컴퓨터활용능력 2급', '자격증'],
#        ['지원분야 : 시스템엔지니어', '지원분야', '|', '학교 : 서울(下)', '학교', '|', '학점 : 4.13', '학점', '|', '오픽점수 : IM', '오픽점수', '|', '자격증 : 정보처리기사, 컴퓨터활용능력 2급', '자격증'],
#        ['지원분야 : 공통(CE/IM/전사직속)-소프트웨어', '지원분야', '|', '학교 : 서울(下)', '학교', '|', '학점 : 4.13', '학점', '|', '오픽점수 : IM', '오픽점수', '|', '자격증 : 정보처리기사, 컴퓨터활용능력 2급', '자격증'],
#        ['지원분야 : 정보통신.IT', '지원분야', '|', '학교 : 서울(下)', '학교', '|', '학점 : 3.80', '학점', '|', '토익점수 : 835', '토익점수', '|', '오픽점수 : IH', '오픽점수', '|', '자격증 : 정보처리기사', '자격증'],
#        ['지원분야 : 게임개발', '지원분야', '|', '학교 : 지방(下)', '학교', '|', '학점 : 3.77', '학점', '|', '토익점수 : 825', '토익점수', '|', '인턴 : IT.프로그램.개발.웹.통신장비', '인턴', '|', '공모전 : 광고/아이디어, 학술/논문', '공모전'],
#        ['지원분야 : 네트워크관리', '지원분야', '|', '학교 : 서울(下)', '학교', '|', '학점 : 3.20', '학점', '|', '토익점수 : 820','토익점수', '|', '자격증 : 정보통신기사', '자격증'],
#        ['지원분야 : 네트워크관리', '지원분야', '|', '학교 : 서울(下)', '학교', '|', '학점 : 3.20', '학점', '|', '토익점수 : 820', '토익점수', '|', '자격증 : 정보통신기사', '자격증'],
#        ['지원분야 : 정보통신.IT', '지원분야', '|', '학교 : 서울(下)', '학교', '|', '학점 : 3.20', '학점', '|', '토익점수 : 820', '토익점수', '|', '자격증 : 정보통신기사', '자격증'],
#        ['지원분야 : CS', '지원분야', '|', '학교 : 서울(下)', '학교', '|', '학점 : 3.58', '학점', '|', '토익점수 : 705', '토익점수', '|', '자격증 : 컴퓨터활용능력 2급', '자격증', '|', '인턴 : 경영.금융.회계.사무,영업.판매', '인턴'],
#        ['지원분야 : 공통(CE/IM/전사직속)-소프트웨어', '지원분야', '|', '학교 : 지방(下)', '학교', '|', '학점 : 3.50', '학점', '|', '토익점수 : 785', '토익점수', '|', '자격증 : 정보처리기사', '자격증', '|', '인턴 : IT.프로그램.개발.웹.통신장비', '인턴'],
#        ['지원분야 : 데이터베이스', '지원분야', '|', '학교 : 지방(下)', '학교', '|', '학점 : 3.50', '학점', '|', '토익점수 : 785', '토익점수', '|', '자격증 : 정보처리기사', '자격증', '|', '인턴 : IT.프로그램.개발.웹.통신장비', '인턴']]


def crawling_to_df(data, company_lst):
    columns = []
    processed_data = []

    # 모든 컬럼 추출
    for applicant in data:
        for item in applicant:
            if ':' in item:
                column = item.split(':')[0].strip() 
                if column not in columns: 
                    columns.append(column)

    for applicant, company in zip(data, company_lst):
        applicant_dict = {}
        for item in applicant:
            if ':' in item:
                column, value = item.split(':')
                column = column.strip() 
                value = value.strip() 
                applicant_dict[column] = value  
            else:
                continue
        applicant_dict = {'company': company[0], **applicant_dict} 
        processed_data.append(applicant_dict)

    df = pd.DataFrame(processed_data, columns=['company'] + columns)

    return df

df = crawling_to_df(spec_lst, company_lst)

df.to_excel('output_page_1_2.xlsx', index=False)

